#include <GL/glew.h>
#include "shader.h"
#include<string>
#include <iostream>
#include <fstream>

bool ReadFile(const char* pFileName, std::string& outFile)
{
	std::ifstream f(pFileName);

	bool ret = false;

	if (f.is_open()) {
		std::string line;
		while (getline(f, line)) {
			outFile.append(line);
			outFile.append("\n");
		}

		f.close();

		ret = true;
	}
	else {
		std::cerr << "Cannot open file " << pFileName << " for read" << std::endl;
	}

	return ret;
}

bool AddShader(GLuint program, GLenum ShaderType, const char * pFilename, GLuint* shader)
{
	std::string s;

	if (!ReadFile(pFilename, s)) {
		return false;
	}

	GLuint ShaderObj = glCreateShader(ShaderType);

	if (ShaderObj == 0) {
		fprintf(stderr, "Error creating shader type %d\n", ShaderType);
		return false;
	}

	// Save the shader object - will be deleted in the destructor
	//m_shaderObjList.push_back(ShaderObj);
	*shader = ShaderObj;

	const GLchar* p[1];
	p[0] = s.c_str();
	GLint Lengths[1] = { (GLint)s.size() };

	glShaderSource(ShaderObj, 1, p, Lengths);

	glCompileShader(ShaderObj);

	GLint success;
	glGetShaderiv(ShaderObj, GL_COMPILE_STATUS, &success);

	if (!success) {
		GLchar InfoLog[1024];
		glGetShaderInfoLog(ShaderObj, 1024, NULL, InfoLog);
		fprintf(stderr, "Error compiling '%s': '%s'\n", pFilename, InfoLog);
		return false;
	}

	glAttachShader(program, ShaderObj);
	//std::cout << s << std::endl;
	return true;
}

//std::vector<std::string> Shader::GetUniformNames()
//{
//	return std::vector<std::string>();
//}

//void Shader::LocateUniform(std::string name, Uniform & uniform)
//{
//}

void CShader::UseProgram()
{
	glUseProgram(this->program);
}

CShader::CShader()
{
	/*auto names = this->GetUniformNames();
	for (auto n = names.begin(); n != names.end(); n++) {
		this->uniforms.push_back(std::pair<std::string, int>(*n, -1));
	}*/
}

void CShader::Load(const char * vs, const char * fs, const char * gs)
{
	this->program = glCreateProgram();
	GLuint shader_vs = 0;
	GLuint shader_fs = 0;
	GLuint shader_gs = 0;
	vs && AddShader(this->program, GL_VERTEX_SHADER, vs, &shader_vs);
	fs && AddShader(this->program, GL_FRAGMENT_SHADER, fs, &shader_fs);
	gs && AddShader(this->program, GL_GEOMETRY_SHADER, gs, &shader_gs);


	GLint Success = 0;
	GLchar ErrorLog[1024] = { 0 };

	glLinkProgram(this->program);

	glGetProgramiv(this->program, GL_LINK_STATUS, &Success);
	if (Success == 0) {
		glGetProgramInfoLog(this->program, sizeof(ErrorLog), NULL, ErrorLog);
		fprintf(stderr, "Error linking shader program: '%s'\n", ErrorLog);
		return;
	}

	glValidateProgram(this->program);
	glGetProgramiv(this->program, GL_VALIDATE_STATUS, &Success);
	if (!Success) {
		glGetProgramInfoLog(this->program, sizeof(ErrorLog), NULL, ErrorLog);
		fprintf(stderr, "Invalid shader program: '%s'\n", ErrorLog);
		//   return false;
	}

	// Delete the intermediate shader objects that have been added to the program
	if (shader_vs) glDeleteShader(shader_vs);
	if (shader_fs) glDeleteShader(shader_fs);
	if (shader_gs) glDeleteShader(shader_gs);


	/*for (auto u = this->uniforms.begin(); u != this->uniforms.end(); u++) {
		u->second = glGetUniformLocation(this->program, u->first.c_str());
		if (u->second < 0) {
			std::cerr << "Cannot find uniform `" << u->first << "`" << std::endl;
		}
	}*/

}

//void Shader::LocateUniform(std::string name, Uniform * uniform)
//{
//	uniform->location = glGetUniformLocation(this->program, name.c_str());
//	if (uniform->location < 0) {
//		std::cerr << "Cannot find uniform `" << name << "`" << std::endl;
//	}
//}

void CShader::LocateUniform(std::string name, Uniform & uniform)
{
	uniform.location = glGetUniformLocation(this->program, name.c_str());
	if (uniform.location < 0) {
		std::cerr << "Cannot find uniform `" << name << "`" << std::endl;
		uniform.program = -1;
	}
	else {
		uniform.program = this->program;
	}
}


CShader::~CShader()
{
}

Shader CShader::Create()
{
	return Shader(new CShader);
}

//CBlockShader::CBlockShader()
//{
//	/*this->Load("shader/block/block.vs", "shader/block/block.fs", "shader/block/block.gs");
//	LocateUniform("MVP", &mvp);*/
//}
//
//BlockShader CBlockShader::Create()
//{
//	return BlockShader(new CBlockShader);
//}
//
//
//
//ScreenShader CScreenShader::Create()
//{
//	return ScreenShader(new CScreenShader);
//}


float ssao_kernel_256[] = 
{
	1.0, 0.0, 0.0,
	0.5625, 0.25, 0.0625,
	0.5625, 0.25, 0.0,
	0.5625, 0.25, 0.0625,
	0.5625, 0.0625, 0.25,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.0,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.25,
	0.5625, 0.0, 0.25,
	0.5625, 0.0, 0.0625,
	0.5625, 0.0, 0.0,
	0.5625, 0.0, 0.0625,
	0.5625, 0.0, 0.25,
	0.5625, 0.0625, 0.25,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.0,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.25,
	0.5625, 0.25, 0.0625,
	0.5625, 0.25, 0.0,
	0.5625, 0.25, 0.0625,
	0.25, 0.5625, 0.0625,
	0.25, 0.5625, 0.0,
	0.25, 0.5625, 0.0625,
	0.25, 0.25, 0.25,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.0,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.25,
	0.25, 0.0625, 0.5625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.0,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.5625,
	0.25, 0.0, 0.5625,
	0.25, 0.0, 0.25,
	0.25, 0.0, 0.0625,
	0.25, 0.0, 0.0,
	0.25, 0.0, 0.0625,
	0.25, 0.0, 0.25,
	0.25, 0.0, 0.5625,
	0.25, 0.0625, 0.5625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.0,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.5625,
	0.25, 0.25, 0.25,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.0,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.25,
	0.25, 0.5625, 0.0625,
	0.25, 0.5625, 0.0,
	0.25, 0.5625, 0.0625,
	0.0625, 0.5625, 0.25,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.0,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.25,
	0.0625, 0.25, 0.5625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.0,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.5625,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.0,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.0, 0.5625,
	0.0625, 0.0, 0.25,
	0.0625, 0.0, 0.0625,
	0.0625, 0.0, 0.0,
	0.0625, 0.0, 0.0625,
	0.0625, 0.0, 0.25,
	0.0625, 0.0, 0.5625,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.0,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.25, 0.5625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.0,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.5625,
	0.0625, 0.5625, 0.25,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.0,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.25,
	0.0, 1.0, 0.0,
	0.0, 0.5625, 0.25,
	0.0, 0.5625, 0.0625,
	0.0, 0.5625, 0.0,
	0.0, 0.5625, 0.0625,
	0.0, 0.5625, 0.25,
	0.0, 0.25, 0.5625,
	0.0, 0.25, 0.25,
	0.0, 0.25, 0.0625,
	0.0, 0.25, 0.0,
	0.0, 0.25, 0.0625,
	0.0, 0.25, 0.25,
	0.0, 0.25, 0.5625,
	0.0, 0.0625, 0.5625,
	0.0, 0.0625, 0.25,
	0.0, 0.0625, 0.0625,
	0.0, 0.0625, 0.0,
	0.0, 0.0625, 0.0625,
	0.0, 0.0625, 0.25,
	0.0, 0.0625, 0.5625,
	0.0, 0.0, 1.0,
	0.0, 0.0, 0.5625,
	0.0, 0.0, 0.25,
	0.0, 0.0, 0.0625,
	0.0, 0.0, 0.0625,
	0.0, 0.0, 0.25,
	0.0, 0.0, 0.5625,
	0.0, 0.0, 1.0,
	0.0, 0.0625, 0.5625,
	0.0, 0.0625, 0.25,
	0.0, 0.0625, 0.0625,
	0.0, 0.0625, 0.0,
	0.0, 0.0625, 0.0625,
	0.0, 0.0625, 0.25,
	0.0, 0.0625, 0.5625,
	0.0, 0.25, 0.5625,
	0.0, 0.25, 0.25,
	0.0, 0.25, 0.0625,
	0.0, 0.25, 0.0,
	0.0, 0.25, 0.0625,
	0.0, 0.25, 0.25,
	0.0, 0.25, 0.5625,
	0.0, 0.5625, 0.25,
	0.0, 0.5625, 0.0625,
	0.0, 0.5625, 0.0,
	0.0, 0.5625, 0.0625,
	0.0, 0.5625, 0.25,
	0.0, 1.0, 0.0,
	0.0625, 0.5625, 0.25,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.0,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.25,
	0.0625, 0.25, 0.5625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.0,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.5625,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.0,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.0, 0.5625,
	0.0625, 0.0, 0.25,
	0.0625, 0.0, 0.0625,
	0.0625, 0.0, 0.0,
	0.0625, 0.0, 0.0625,
	0.0625, 0.0, 0.25,
	0.0625, 0.0, 0.5625,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.0,
	0.0625, 0.0625, 0.0625,
	0.0625, 0.0625, 0.25,
	0.0625, 0.0625, 0.5625,
	0.0625, 0.25, 0.5625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.0,
	0.0625, 0.25, 0.0625,
	0.0625, 0.25, 0.25,
	0.0625, 0.25, 0.5625,
	0.0625, 0.5625, 0.25,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.0,
	0.0625, 0.5625, 0.0625,
	0.0625, 0.5625, 0.25,
	0.25, 0.5625, 0.0625,
	0.25, 0.5625, 0.0,
	0.25, 0.5625, 0.0625,
	0.25, 0.25, 0.25,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.0,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.25,
	0.25, 0.0625, 0.5625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.0,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.5625,
	0.25, 0.0, 0.5625,
	0.25, 0.0, 0.25,
	0.25, 0.0, 0.0625,
	0.25, 0.0, 0.0,
	0.25, 0.0, 0.0625,
	0.25, 0.0, 0.25,
	0.25, 0.0, 0.5625,
	0.25, 0.0625, 0.5625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.0,
	0.25, 0.0625, 0.0625,
	0.25, 0.0625, 0.25,
	0.25, 0.0625, 0.5625,
	0.25, 0.25, 0.25,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.0,
	0.25, 0.25, 0.0625,
	0.25, 0.25, 0.25,
	0.25, 0.5625, 0.0625,
	0.25, 0.5625, 0.0,
	0.25, 0.5625, 0.0625,
	0.5625, 0.25, 0.0625,
	0.5625, 0.25, 0.0,
	0.5625, 0.25, 0.0625,
	0.5625, 0.0625, 0.25,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.0,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.25,
	0.5625, 0.0, 0.25,
	0.5625, 0.0, 0.0625,
	0.5625, 0.0, 0.0,
	0.5625, 0.0, 0.0625,
	0.5625, 0.0, 0.25,
	0.5625, 0.0625, 0.25,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.0,
	0.5625, 0.0625, 0.0625,
	0.5625, 0.0625, 0.25,
	0.5625, 0.25, 0.0625,
	0.5625, 0.25, 0.0,
	0.5625, 0.25, 0.0625,
	1.0, 0.0, 0.0
};

float ssao_kernel_128[] = {
		0.003919, -0.146302, 0.136224,
		-0.112620, -0.001147, 0.001133,
		0.186256, 0.007783, 0.023901,
		0.239534, 0.001479, 0.194901,
		0.172301, 0.002139, 0.010046,
		0.062090, -0.002274, 0.201714,
		-0.000003, 0.155064, -0.094843,
		0.176049, -0.013641, 0.153323,
		0.044067, 0.255502, 0.000790,
		0.006206, 0.054383, 0.061146,
		-0.101868, 0.219676, -0.176432,
		-0.568346, 0.000000, -0.073214,
		-0.010015, 0.006311, -0.770735,
		0.501335, 0.029838, 0.019021,
		-0.004480, 0.113760, -0.026380,
		-0.261045, 0.003342, -0.000304,
		-0.282408, 0.114552, 0.114096,
		-0.078886, -0.006011, 0.261490,
		0.029979, 0.272350, 0.000303,
		-0.129963, 0.002273, 0.000000,
		0.136972, -0.000135, 0.000021,
		0.058883, -0.031382, -0.023470,
		-0.002385, 0.013833, -0.334276,
		0.407116, 0.001717, 0.000100,
		0.062254, -0.000011, -0.021193,
		-0.195026, 0.005791, -0.172387,
		-0.006944, -0.004750, -0.001290,
		0.572576, -0.001905, 0.064296,
		0.074570, 0.010433, -0.010297,
		0.063171, -0.057791, 0.089804,
		-0.008533, -0.136809, -0.388349,
		-0.043758, 0.014553, 0.268602,
		-0.078571, 0.009033, -0.261601,
		0.001860, -0.005066, -0.190125,
		-0.000119, 0.000226, -0.000169,
		0.015730, 0.264767, 0.086308,
		0.000071, 0.007449, 0.032429,
		0.103914, 0.176465, -0.052400,
		-0.008254, 0.014006, 0.088043,
		-0.078634, -0.086952, 0.021343,
		0.041770, 0.784661, -0.001316,
		-0.460222, -0.005960, -0.011628,
		0.537095, 0.002320, 0.042219,
		-0.203122, 0.000144, 0.452808,
		-0.017236, 0.129859, 0.472218,
		0.078661, -0.000121, 0.562234,
		0.005330, 0.631650, -0.002518,
		-0.000028, 0.169038, 0.227059,
		-0.096197, 0.473615, -0.069028,
		0.002191, -0.357801, 0.083046,
		-0.042909, -0.003796, -0.631932,
		-0.013867, 0.584022, -0.026325,
		0.230956, -0.129672, -0.053966,
		-0.019559, 0.041876, -0.087984,
		0.000124, 0.178557, -0.192601,
		-0.130421, -0.241456, -0.000230,
		0.000108, 0.345026, -0.211958,
		-0.236501, 0.360289, 0.000900,
		-0.140368, -0.247828, 0.053845,
		0.001340, -0.185428, -0.376213,
		-0.036335, 0.048011, -0.426072,
		0.020457, 0.141748, 0.000009,
		-0.425313, 0.000004, 0.000033,
		0.212399, 0.419871, 0.002056,
		0.139332, 0.058276, -0.412792,
		0.316748, 0.119081, 0.014681,
		0.499484, -0.000878, -0.070656,
		-0.002181, -0.308446, 0.052217,
		0.051476, -0.002424, 0.040997,
		0.585646, -0.000018, 0.067858,
		0.338948, -0.027088, 0.019159,
		0.009802, -0.015139, -0.014775,
		-0.193036, 0.015269, -0.088537,
		0.001432, -0.133559, -0.121845,
		0.016970, 0.136072, 0.325427,
		-0.003792, 0.000862, -0.004395,
		0.263565, 0.215286, -0.005928,
		-0.012730, 0.157648, -0.026773,
		0.000406, -0.644837, -0.087662,
		0.269313, 0.091253, 0.004707,
		0.006575, -0.800505, 0.009122,
		0.032222, -0.001590, -0.250563,
		-0.044124, 0.002901, 0.024018,
		-0.032088, -0.001205, -0.046611,
		0.354700, -0.001796, 0.224734,
		-0.137609, -0.009184, -0.340459,
		0.433662, -0.033059, -0.002308,
		0.013092, 0.011628, -0.438211,
		-0.001367, 0.014347, -0.200231,
		0.225559, -0.051023, 0.003575,
		0.002586, -0.365338, -0.000353,
		-0.004621, -0.085483, 0.316819,
		-0.273206, 0.063149, 0.000135,
		0.000641, 0.000000, 0.487457,
		0.187397, -0.064251, 0.012225,
		0.144304, 0.074180, -0.249396,
		-0.447091, 0.000636, 0.221085,
		0.005166, 0.431607, 0.178107,
		0.120179, -0.196965, 0.061951,
		-0.000532, -0.020126, 0.237039,
		0.074941, -0.010559, 0.227133,
		0.249482, 0.011744, 0.310076,
		0.239835, -0.000998, -0.216483,
		0.079689, -0.315207, -0.106069,
		0.000457, -0.762208, 0.000166,
		0.066730, 0.358851, -0.010420,
		0.011052, -0.000005, -0.107787,
		0.342669, -0.149578, -0.069188,
		-0.000143, 0.013567, -0.438155,
		-0.000505, -0.145473, -0.105801,
		-0.002788, -0.036427, -0.592170,
		-0.227744, -0.101059, -0.184911,
		-0.517783, 0.000012, 0.022814,
		0.001256, -0.016036, 0.059815,
		0.574481, 0.037187, 0.000179,
		-0.168986, 0.006065, 0.133021,
		0.026657, 0.380065, 0.007185,
		0.003813, 0.000022, -0.010978,
		-0.005890, -0.000280, -0.211056,
		0.095313, -0.072186, 0.208486,
		-0.001342, 0.017100, 0.128993,
		0.156116, -0.006581, -0.417180,
		0.148251, 0.069283, 0.015013,
		0.004462, -0.000105, 0.267311,
		0.001245, -0.175750, 0.053844,
		0.000020, -0.359568, 0.002300,
		-0.019200, 0.030830, -0.072669,
		0.000001, 0.102115, -0.092975,
};